def publish_env = "${env.publish_env}"

node {
    def artiServer
    def bnuildInfo
    def rtMaven
    stage('SCM'){
        git 'https://github.com/liwei2151284/project-examples.git'
    }
    
    stage('set env'){
        artiServer = Artifactory.server('artiha-demo')
        buildInfo = Artifactory.newBuildInfo()
		rtMaven = Artifactory.newMavenBuild()
    }
    
    stage('change version tag'){
    	
  sh label: '', script: 'sed -i \"s/version_tag_for_build/1.0.$BUILD_NUMBER/g\" ./maven-example/pom.xml'
	sh label: '', script: 'sed -i \"s/version_tag_for_build/1.0.$BUILD_NUMBER/g\" ./maven-example/multi1/pom.xml'
	sh label: '', script: 'sed -i \"s/version_tag_for_build/1.0.$BUILD_NUMBER/g\" ./maven-example/multi2/pom.xml'
	sh label: '', script: 'sed -i \"s/version_tag_for_build/1.0.$BUILD_NUMBER/g\" ./maven-example/multi3/pom.xml'
    }
    
    stage ('Artifactory configuration') {
        rtMaven.tool = 'maven' // Tool name from Jenkins configuration
        rtMaven.deployer releaseRepo: 'jenkins_pipeline_webinar_stage_local', snapshotRepo: 'jenkins_pipeline_webinar_snapshot_local', server: artiServer
        rtMaven.resolver releaseRepo: 'jenkins_pipeline_webinar_release_virtual', snapshotRepo: 'jenkins_pipeline_webinar_snapshot_virtual', server: artiServer
    }
    
    stage ('Exec Maven') {
        rtMaven.run pom: 'maven-example/pom.xml', goals: 'clean install', buildInfo: buildInfo
    }
    
    stage ('Publish build info') {
        artiServer.publishBuildInfo buildInfo
    }
    
    stage('sonar scan'){
        echo "${publish_env}"
    }
    
    stage('sonar result post'){
        
    }
    
    stage('xray scan'){
        
    }
    
    stage('xray scan result post '){
        
    }
    
    stage('auto test'){
        
    }
    
    stage('auto test result post'){
        
    }
    
    stage('promotion'){
        
    }
    
    stage('deploy'){
        
    }
    
    stage('deploy result post'){
        
    }
    
    stage('mail'){
        
    }
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def env = "${env.env}"

node {
    def artiServer
    def buildInfo
    def rtMaven
    
    def SONAR_SOURCES = 'maven-example/'
    def SONAR_HOST_URL = 'http://47.93.114.82:9000/'
    def SONAR_PROJECT_KEY = "${JOB_NAME}"
    
    stage('set env'){
        artiServer = Artifactory.server('artiha-demo')
        buildInfo = Artifactory.newBuildInfo()
		//buildInfo.env.capture = true
		rtMaven = Artifactory.newMavenBuild()
    }
    
    stage ('SCM') {
        git url: 'https://github.com/liwei2151284/project-examples.git'
    }

    stage('change version tag'){
    	
    	sh "sed -i 's/version_tag_for_build/1.0.$BUILD_NUMBER/g/' ./maven-examples/pom.xml"
	sh "sed -i 's/version_tag_for_build/1.0.$BUILD_NUMBER/g/' ./maven-examples/multi3/pom.xml"
	sh "sed -i 's/version_tag_for_build/1.0.$BUILD_NUMBER/g/' ./maven-examples/multi2/pom.xml"
	sh "sed -i 's/version_tag_for_build/1.0.$BUILD_NUMBER/g/' ./maven-examples/multi1/pom.xml"
    }

    stage ('Artifactory configuration') {
        rtMaven.tool = 'maven' // Tool name from Jenkins configuration
        rtMaven.deployer releaseRepo: 'jenkins_pipeline_webinar_stage_local', snapshotRepo: 'jenkins_pipeline_webinar_snapshot_local', server: artiServer
        rtMaven.resolver releaseRepo: 'jenkins_pipeline_webinar_release_virtual', snapshotRepo: 'jenkins_pipeline_webinar_snapshot_virtual', server: artiServer
    }

    stage ('Exec Maven') {
        rtMaven.run pom: 'maven-example/pom.xml', goals: 'clean install', buildInfo: buildInfo
    }

    stage ('Publish build info') {
        artiServer.publishBuildInfo buildInfo
    }
    
    
    stage('sonar scan'){

		// Sonar scan
        def scannerHome = tool 'sonarClient';
        withSonarQubeEnv('sonar') {
	    sh "echo ${scannerHome}"
            sh "${scannerHome}/bin/sonar-runner -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=${SONAR_SOURCES}"
        }
        
    }
    
    stage('sonar result post'){
    	//获取artifactory的apikey
    	withCredentials([string(credentialsId: 'Artifactory_api_key', variable: 'aa')]) {
	    //def arti_api_key = ${aa}
	}
	
	

    }
    
    stage('xray scan'){
        
    }
    
    stage('xray result post'){
        echo "${env}"
    }
    
    stage('promotion_snapshot'){
      echo "promotion"
      def promotionConfig = [
          //Mandatory parameters
          'buildName'          : buildInfo.name,
          'buildNumber'        : buildInfo.number,
          'targetRepo'         : 'jenkins_pipeline_webinar_release_local',
    
          //Optional parameters
          'comment'            : 'this is the promotion comment',
          'sourceRepo'         : 'jenkins_pipeline_webinar_stage_local',
          'status'             : 'Released',
          'includeDependencies': false,
          'failFast'           : true,
          'copy'               : true
      ]
      // Promote build
      artiServer.promote promotionConfig
    }
    
    stage('test deploy'){
        parallel(
		'test env1': {
		    sh "echo 'deploy test_env1'"
		    //node('node1'){
		    //    def dir = new File("/test/workspace/")
		    //    deleteDir(dir)
		    //}
		},
		'test env2': {
		    sh "echo 'deploy test_env1'"
		    //node('node2'){
		    //    def dir = new File("/test/home/workspace/")
		    //    deleteDir(dir)
		    //}
		}
	)
    }
    
    stage('approve') {
            input message: 'tongguo', ok: 'ok'
	}
    
    stage('test result post'){
        
    }
    
    stage('promotion'){
        
    }
    
    stage('deploy'){
        
    }
    
    stage('deploy result post'){
        
    }
}
    
